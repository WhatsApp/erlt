-module(day16).

-export([puzzle1/1, puzzle2/1]).

-struct rule :: (name :: [integer()], ranges :: [interval()]).

-type interval :: {integer(), integer()}.


-spec puzzle1(string()) -> integer().
puzzle1(FileName) ->
    {Rules, _YourTicket, NearbyTickets} = get_input(FileName),
    t_lists:sum([check_ticket(Ticket, Rules) || Ticket <- NearbyTickets]).

check_ticket(Ticket, Rules) ->
    t_lists:sum(t_lists:filter(fun(Val) -> check_value(Val, Rules) end, Ticket)).

check_value(Value, Rules) ->
    t_lists:any(fun(Rule) -> check_rule(Value, Rule) end, Rules).

check_rule(Value, #rule{ranges=Ranges}) ->
    t_lists:any(fun(Range) -> check_range(Value, Range) end, Ranges).

check_range(Value, {X,Y}) ->
    Value >= X andalso Value =< Y.

-spec puzzle2(string()) -> integer().
puzzle2(FileName) ->
    {Rules, YourTicket, NearbyTickets} = get_input(FileName),
    ValidTickets = discard_tickets(Rules, NearbyTickets),
    Columns = get_columns(ValidTickets),
    ColumnAssignment = assign_columns(Rules, Columns),
    calculate_result(ColumnAssignment, YourTicket).

discard_tickets(Rules, NearbyTickets) ->
    [Ticket || Ticket <- NearbyTickets, t_lists:all(fun(Val) -> check_value(Val, Rules) end, Ticket)].

get_columns([[]|_]) -> [];
get_columns([]) -> [];
get_columns(Rows) ->
    {Column, Rest} = get_column_and_rest(Rows, [], []),
    [Column|get_columns(Rest)].

get_column_and_rest([[Val|Rest]|Rows], AccColumn, AccRest) ->
    get_column_and_rest(Rows, [Val|AccColumn], [Rest|AccRest]);
get_column_and_rest([], AccColumn, AccRest) ->
    {t_lists:reverse(AccColumn), t_lists:reverse(AccRest)}.

assign_columns(Rules, Columns) ->
    NumberedColumns = t_lists:zip(t_lists:seq(1, erlang:length(Columns)), Columns),
    Assignments =
        t_lists:sort(fun(A,B) -> erlang:length(A) < erlang:length(B) end, [get_all(Rule, NumberedColumns) || Rule <- Rules]),
    choose(Assignments, []).

choose([Possible|Rest], Used) ->
    [{Rule, Column}] = [{R,C} || {R,C} <- Possible, not t_lists:member(C,Used)],
    [{Rule, Column} | choose(Rest, [Column|Used])];
choose([], _) -> [].

get_all(Rule, NumberedColumns) ->
    [{Rule, N} || {N, Column} <- NumberedColumns, t_lists:all(fun(V) -> check_rule(V, Rule) end, Column)].


calculate_result([{#rule{name=Name}, Column} | Rest], YourTicket) ->
    case t_lists:prefix(dep(), Name) of
        true -> t_lists:nth(Column, YourTicket) * calculate_result(Rest, YourTicket);
        false -> calculate_result(Rest, YourTicket)
    end;
calculate_result([], _YourTicket) ->
    1.

-spec dep() -> [integer()].
[unchecked]
dep() -> "departure".

-spec get_input(string()) -> {[rule()], [integer()], [[integer()]]}.
[unchecked]
get_input(FileName) ->
    {'ok', File} = file:open(FileName, ['read']),
    read_input(File).

[unchecked]
read_input(File) ->
    Rules = read_rules(File),
    YourTicket = read_your_ticket(File),
    NearbyTickets = read_nearby_tickets(File),
    {Rules, YourTicket, NearbyTickets}.

[unchecked]
read_rules(File) ->
    case io:get_line(File, "") of
        "\n" -> [];
        Line -> [parse_rule(Line) | read_rules(File)]
    end.

[unchecked]
read_your_ticket(File) ->
    "your ticket:\n" ++ _ = io:get_line(File, ""),
    Line = io:get_line(File, ""),
    "\n" = io:get_line(File, ""),
    parse_ticket(Line).

[unchecked]
read_nearby_tickets(File) ->
    "nearby tickets:\n" = io:get_line(File, ""),
    read_tickets(File).

[unchecked]
read_tickets(File) ->
    case io:get_line(File, "") of
        "\n" -> [];
        'eof' -> [];
        Line -> [parse_ticket(Line) | read_tickets(File)]
    end.

[unchecked]
parse_rule(Line) ->
    [Name, Rest] = string:split(Line, ":"),
    {'ok', [A,B,C,D], _} = io_lib:fread("~d-~d or ~d-~d", Rest),
    #rule{name=Name, ranges=[{A,B},{C,D}]}.

[unchecked]
parse_ticket(Line) ->
    [list_to_integer(Val) || Val <- string:split(string:trim(Line), ",", 'all')].
