%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(calc_core).

-export_type([expr/0]).
-export([expr_number/1, expr_add/2, expr_subtr/2, expr_mult/2, expr_divd/2, expr_var/1]).

-enum expr() :: (
    number{n :: integer()},
    add  {a :: expr(), b :: expr()},
    subtr{a :: expr(), b :: expr()},
    mult {a :: expr(), b :: expr()},
    divd {a :: expr(), b :: expr()},
    var{v :: atom()}
).

%% helper functions to be invoked from erl1
-spec expr_number(integer()) -> expr().
expr_number(N) -> expr.number{ n = N}.

-spec expr_add(expr(), expr()) -> expr().
expr_add(E1, E2) -> expr.add{a = E1, b = E2}.

-spec expr_subtr(expr(), expr()) -> expr().
expr_subtr(E1, E2) -> expr.subtr{a = E1, b = E2}.

-spec expr_mult(expr(), expr()) -> expr().
expr_mult(E1, E2) -> expr.mult{a = E1, b = E2}.

-spec expr_divd(expr(), expr()) -> expr().
expr_divd(E1, E2) -> expr.divd{a = E1, b = E2}.

-spec expr_var(atom()) -> expr().
expr_var(A) -> expr.var{v = A}.
