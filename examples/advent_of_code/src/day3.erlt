%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(day3).

-export([puzzle1/1
        ,puzzle2/1
        ]).

[unchecked]
-opaque t_map(X,Y) :: term().

-struct input :: (dim::{integer(),integer()}, tree_map::t_map({integer(),integer()}, integer())).

-spec get(X, t_map(X,Y)) -> Y.
[unchecked]
get(X, Map) -> maps:get(X, Map).

-spec puzzle1(string()) -> integer().
puzzle1(FileName) ->
    count_trees({1,1}, get_input(FileName), {3,1}).

-spec puzzle2(string()) -> integer().
puzzle2(FileName) ->
    Do = fun(Slope) -> count_trees({1,1}, get_input(FileName), Slope) end,
    Do({1,1}) * Do({3,1}) * Do({5,1}) * Do({7,1}) * Do({1,2}).

count_trees(Pos, #input{dim=Dim, tree_map = Map}=Input, Slope) ->
    case update_pos(Pos, Dim, Slope) of
        pos_update.done -> get(Pos, Map);
        pos_update.next{NewPos} ->  get(Pos, Map) + count_trees(NewPos, Input, Slope)
    end.

-enum pos_update :: (done, next{{integer(), integer()}}).

update_pos({X,Y}, {Width, Heigth}, {Right, Down}) ->
    if
        Y + Down > Heigth -> pos_update.done;
        X+Right > Width -> pos_update.next{{X+Right-Width, Y+Down}};
        true -> pos_update.next{{X+Right, Y+Down}}
    end.

-spec get_input(string()) -> input().
[unchecked]
get_input(FileName) ->
    {'ok', File} = file:open(FileName, ['read']),
    [Line|_] = Lines = get_lines(File),
    {Map, H} = create_map(Lines, #{}, 1),
    #input{dim = {length(Line), H}, tree_map = Map}.

[unchecked]
get_lines(File) ->
    case file:read_line(File) of
        {'ok', Line} ->
            [lists:reverse(tl(lists:reverse(Line)))|get_lines(File)];
        'eof' ->
            []
    end.

[unchecked]
create_map([Line|Lines], InputMap, N) ->
    {_, NewMap} = lists:foldl(fun(Val, {M, Map}) -> {M+1, maps:put({M, N}, nof_trees(Val), Map)} end, {1, InputMap}, Line),
    create_map(Lines, NewMap, N+1);
create_map([], Map, N) ->
    {Map, N-1}.

nof_trees($#) -> 1;
nof_trees($.) -> 0.
