%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(struct_mod11).

-export_type([foo/0, bar/1, mixed/0]).

-export([foo/0, bar/0, baz/0, pattern/3, guard/1, field/1, update/1, index/1]).

-struct bar(A) :: (A, mixed()).

-struct mixed() :: (integer(), a :: integer()).

-struct baz :: (bar(integer())).

-struct in_pattern :: ().

-struct foo :: ().

-spec foo() -> foo().
foo() ->
    #foo{}.

-spec bar() -> bar(integer()).
bar() ->
    #bar{1, #mixed{1, a = 2}}.

-spec baz() -> baz().
baz() ->
    #baz{bar()}.

-spec pattern(foo(), bar(B), in_pattern()) -> B.
pattern(#foo{}, #bar{B, _}, #in_pattern{}) -> B.

-spec guard(bar(integer())) -> string().
guard(Value) when Value =:= #bar{1, #mixed{1, a = 2}} ->
    "ok".

-spec field(bar(integer())) -> {mixed(), integer()}.
field(Value) when Value#bar._0 =:= 1 ->
    {
        Value#bar._1,
        Value#bar._1#mixed.a
    }.

-spec update(mixed()) -> mixed().
update(Value) ->
    Value#mixed{a = 2}.

[unchecked]
index(#bar._0) when #bar._0 =:= 2 ->
    #bar._1.
