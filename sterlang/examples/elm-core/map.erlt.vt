val empty/0: fun(() -> map_ffi:map(A, B))
val get/2: fun((A, map_ffi:map(A, B)) -> maybe:maybe(B))
val Key: A
val Map: map_ffi:map(A, B)
val member/2: fun((A, map_ffi:map(A, B)) -> boolean())
val Key: A
val Map: map_ffi:map(A, B)
val size/1: fun((map_ffi:map(A, B)) -> integer())
val Map: map_ffi:map(A, B)
val is_empty/1: fun((map_ffi:map(A, B)) -> boolean())
val Map: map_ffi:map(A, B)
val insert/3: fun((A, B, map_ffi:map(A, B)) -> map_ffi:map(A, B))
val Key: A
val Value: B
val Map: map_ffi:map(A, B)
val remove/2: fun((A, map_ffi:map(A, B)) -> map_ffi:map(A, B))
val Key: A
val Map: map_ffi:map(A, B)
val update/3: fun((A, fun((maybe:maybe(B)) -> maybe:maybe(B)), map_ffi:map(A, B)) -> map_ffi:map(A, B))
val Key: A
val Alter: fun((maybe:maybe(B)) -> maybe:maybe(B))
val Map: map_ffi:map(A, B)
val Value: B
val singleton/2: fun((A, B) -> map_ffi:map(A, B))
val Key: A
val Value: B
val union/2: fun((map_ffi:map(A, B), map_ffi:map(A, B)) -> map_ffi:map(A, B))
val Map1: map_ffi:map(A, B)
val Map2: map_ffi:map(A, B)
val intersect/2: fun((map_ffi:map(A, B), map_ffi:map(A, B)) -> map_ffi:map(A, B))
val Map1: map_ffi:map(A, B)
val Map2: map_ffi:map(A, B)
val K: A
val diff/2: fun((map_ffi:map(A, B), map_ffi:map(A, B)) -> map_ffi:map(A, B))
val Map1: map_ffi:map(A, B)
val Map2: map_ffi:map(A, B)
val K: A
val fold/3: fun((fun((A, B, C) -> C), C, map_ffi:map(A, B)) -> C)
val F: fun((A, B, C) -> C)
val Acc: C
val Map: map_ffi:map(A, B)
val map/2: fun((fun((B, A) -> C), map_ffi:map(B, A)) -> map_ffi:map(B, C))
val F: fun((B, A) -> C)
val Map: map_ffi:map(B, A)
val filter/2: fun((fun((A, B) -> boolean()), map_ffi:map(A, B)) -> map_ffi:map(A, B))
val F: fun((A, B) -> boolean())
val Map: map_ffi:map(A, B)
val partition/2: fun((fun((A, B) -> boolean()), map_ffi:map(A, B)) -> {map_ffi:map(A, B), map_ffi:map(A, B)})
val F: fun((A, B) -> boolean())
val Map: map_ffi:map(A, B)
val Add: fun((A, B, {map_ffi:map(A, B), map_ffi:map(A, B)}) -> {map_ffi:map(A, B), map_ffi:map(A, B)})
val K: A
val V: B
val D1: map_ffi:map(A, B)
val D2: map_ffi:map(A, B)
val keys/1: fun((map_ffi:map(B, A)) -> list(B))
val Map: map_ffi:map(B, A)
val values/1: fun((map_ffi:map(A, B)) -> list(B))
val Map: map_ffi:map(A, B)
val to_list/1: fun((map_ffi:map(A, B)) -> list({A, B}))
val Map: map_ffi:map(A, B)
val from_list/1: fun((list({A, B})) -> map_ffi:map(A, B))
val List: list({A, B})
