-module(n08).
-export([inferred_funs/0]).

-enum option(A) :: (none, some{A}).
%% simulating it via Variant
-enum recRec1(A) :: (recRec1{A, option(A)}).

getOrElse(Opt, Alt) ->
  case Opt of
      option.some{X} -> X;
      option.none -> Alt
  end.

%% the type for rec cannot be expressed without recursion
name(RecRec) ->
  case RecRec of
    recRec1.recRec1{X, _} -> X
  end.

next(RecRec) ->
   case RecRec of
      recRec1.recRec1{_, Y} -> Y
   end.

%% this also goes to recursive types
unBox(Rec, _) ->
  getOrElse(next(Rec), Rec).

-spec inferred_funs() -> [term()].
[unchecked]
inferred_funs() -> [
    fun name/1,
    fun unBox/2
].
