%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(n08).
-export([inferred_funs/0]).

-enum option(A) :: (none, some{A}).
%% simulating it via Variant
-enum recRec1(A) :: (recRec1{A, option(A)}).

getOrElse(Opt, Alt) ->
  case Opt of
      option.some{X} -> X;
      option.none -> Alt
  end.

%% the type for rec cannot be expressed without recursion
name(RecRec) ->
  case RecRec of
    recRec1.recRec1{X, _} -> X
  end.

next(RecRec) ->
   case RecRec of
      recRec1.recRec1{_, Y} -> Y
   end.

%% this also goes to recursive types
unBox(Rec, _) ->
  getOrElse(next(Rec), Rec).

-spec inferred_funs() -> [term()].
[unchecked]
inferred_funs() -> [
    fun name/1,
    fun unBox/2
].
