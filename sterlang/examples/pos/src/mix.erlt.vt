val two_selectors/1: fun((#( person :: #( name :: A, B ), C )) -> A)
val X: #( person :: #( name :: A, B ), C )
val seq_call/4: fun((fun((A) -> C), fun((B) -> D), A, B) -> D)
val G1: fun((A) -> C)
val G2: fun((B) -> D)
val X: A
val Y: B
val sum_fr/2: fun((fun((A) -> number()), #( l01 :: A, l02 :: A, l03 :: A, l04 :: A, l05 :: A, l06 :: A, l07 :: A, l08 :: A, l09 :: A, l10 :: A, l11 :: A, l12 :: A, l13 :: A, l14 :: A, l15 :: A, l16 :: A, l17 :: A, l18 :: A, l19 :: A, B )) -> number())
val F: fun((A) -> number())
val R: #( l01 :: A, l02 :: A, l03 :: A, l04 :: A, l05 :: A, l06 :: A, l07 :: A, l08 :: A, l09 :: A, l10 :: A, l11 :: A, l12 :: A, l13 :: A, l14 :: A, l15 :: A, l16 :: A, l17 :: A, l18 :: A, l19 :: A, B )
val X01: number()
val X02: number()
val X03: number()
val X04: number()
val X05: number()
val X06: number()
val X07: number()
val X08: number()
val X09: number()
val X10: number()
val X11: number()
val X12: number()
val X13: number()
val X14: number()
val X15: number()
val X16: number()
val X17: number()
val X18: number()
val X19: number()
val sum_fr_proxy/2: fun((fun((A) -> number()), #( l01 :: A, l02 :: A, l03 :: A, l04 :: A, l05 :: A, l06 :: A, l07 :: A, l08 :: A, l09 :: A, l10 :: A, l11 :: A, l12 :: A, l13 :: A, l14 :: A, l15 :: A, l16 :: A, l17 :: A, l18 :: A, l19 :: A, B )) -> number())
val F: fun((A) -> number())
val R: #( l01 :: A, l02 :: A, l03 :: A, l04 :: A, l05 :: A, l06 :: A, l07 :: A, l08 :: A, l09 :: A, l10 :: A, l11 :: A, l12 :: A, l13 :: A, l14 :: A, l15 :: A, l16 :: A, l17 :: A, l18 :: A, l19 :: A, B )
val add_f/1: fun((number()) -> number())
val X: number()
val rich_record_example/0: fun(() -> number())
val name/1: fun((rec_rec2(A)) -> A)
val RecRec: rec_rec2(A)
val X: A
val next/1: fun((rec_rec2(A)) -> core:option(rec_rec2(A)))
val RecRec: rec_rec2(A)
val Y: core:option(rec_rec2(A))
val unBox/1: fun((rec_rec2(A)) -> rec_rec2(A))
val Rec: rec_rec2(A)
val unRec/1: fun((rec(A)) -> #( name :: A, next :: core:option(rec(A)) ))
val Rec: rec(A)
val X: #( name :: A, next :: core:option(rec(A)) )
val unRec2/1: fun((rec(A)) -> rec(A))
val Rec: rec(A)
val apply_add_id/2: fun((fun((A) -> #( id :: B, C )), A) -> #( id :: B, C ))
val Add_id: fun((A) -> #( id :: B, C ))
val Rec: A
val Rec1: #( id :: B, C )
val Unused_id: B
val add_id_empty_rec/1: fun((#( A )) -> #( id :: string() ))
val add_id_rec_f/1: fun((#( f :: A, B )) -> #( f :: A, id :: string() ))
val X: A
val rec_tricky/0: fun(() -> {})
val Rec1: fun((#( A )) -> #( id :: string() ))
val X: #( A )
val Rec2: fun((#( f :: B, C )) -> #( f :: B, id :: string() ))
val X: #( f :: B, C )
val even/1: fun((number()) -> boolean())
val I: number()
val odd/1: fun((number()) -> boolean())
val I: number()
val loop/1: fun(({}) -> fun((#( a :: A, B )) -> A))
val Foo: fun((#( a :: C, D )) -> C)
val X: #( a :: C, D )
val dummy/0: fun(() -> fun((#( a :: A, B )) -> A))
val id/1: fun((A) -> A)
val I: A
val x_fun/0: fun(() -> number())
val y_fun/0: fun(() -> {})
