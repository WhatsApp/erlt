val map/2: fun((fun((A) -> B), list(A)) -> list(B))
val F: fun((A) -> B)
val L: list(A)
val X: A
val filter/2: fun((fun((A) -> boolean()), list(A)) -> list(A))
val F: fun((A) -> boolean())
val L: list(A)
val X: A
val strange_perm/3: fun((fun((A, B) -> boolean()), list(A), list(B)) -> list({A, B}))
val F: fun((A, B) -> boolean())
val L1: list(A)
val L2: list(B)
val X: A
val Y: B
val sort/1: fun((list(A)) -> list(A))
val Pivot: A
val T: list(A)
val X: A
val Y: A
val sort/2: fun((list(A), fun((A, A) -> boolean())) -> list(A))
val Pivot: A
val T: list(A)
val C: fun((A, A) -> boolean())
val X: A
val Y: A
val _C: fun((A, A) -> boolean())
val append/1: fun((list(list(A))) -> list(A))
val L: list(list(A))
val L1: list(A)
val X: A
val flat_map/2: fun((fun((A) -> list(B)), list(A)) -> list(B))
val F: fun((A) -> list(B))
val L: list(A)
val X: A
val Y: B
val list_from_binary/1: fun((binary()) -> list(integer()))
val Binary: binary()
val X: integer()
val binary_from_list1/1: fun((list(integer())) -> binary())
val List: list(integer())
val X: integer()
val binary_from_list2/1: fun((list(binary())) -> binary())
val List: list(binary())
val X: binary()
val even_from_binary/1: fun((binary()) -> list(integer()))
val Binary: binary()
val X: integer()
val rgb/1: fun((binary()) -> list({integer(), integer(), integer()}))
val Pixels: binary()
val R: integer()
val G: integer()
val B: integer()
val pixels/1: fun((list({integer(), integer(), integer()})) -> binary())
val RGB: list({integer(), integer(), integer()})
val R: integer()
val G: integer()
val B: integer()
val slice/2: fun((binary(), integer()) -> list(binary()))
val Binary: binary()
val SliceSize: integer()
val Slice: binary()
