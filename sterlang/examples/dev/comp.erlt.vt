val map/2: fun((fun((A) -> B), list(A)) -> list(B))
val F: fun((A) -> B)
val L: list(A)
val X: A
val filter/2: fun((fun((C) -> boolean()), list(C)) -> list(C))
val F: fun((C) -> boolean())
val L: list(C)
val X: C
val strange_perm/3: fun((fun((D, E) -> boolean()), list(D), list(E)) -> list({D, E}))
val F: fun((D, E) -> boolean())
val L1: list(D)
val L2: list(E)
val X: D
val Y: E
val sort/1: fun((list(F)) -> list(F))
val Pivot: F
val T: list(F)
val X: F
val Y: F
val sort/2: fun((list(G), fun((G, G) -> boolean())) -> list(G))
val Pivot: G
val T: list(G)
val C: fun((G, G) -> boolean())
val X: G
val Y: G
val _C: fun((G, G) -> boolean())
val append/1: fun((list(list(H))) -> list(H))
val L: list(list(H))
val L1: list(H)
val X: H
val flat_map/2: fun((fun((I) -> list(J)), list(I)) -> list(J))
val F: fun((I) -> list(J))
val L: list(I)
val X: I
val Y: J
val list_from_binary/1: fun((binary()) -> list(integer()))
val Binary: binary()
val X: integer()
val binary_from_list1/1: fun((list(integer())) -> binary())
val List: list(integer())
val X: integer()
val binary_from_list2/1: fun((list(binary())) -> binary())
val List: list(binary())
val X: binary()
val even_from_binary/1: fun((binary()) -> list(integer()))
val Binary: binary()
val X: integer()
val rgb/1: fun((binary()) -> list({integer(), integer(), integer()}))
val Pixels: binary()
val R: integer()
val G: integer()
val B: integer()
val pixels/1: fun((list({integer(), integer(), integer()})) -> binary())
val RGB: list({integer(), integer(), integer()})
val R: integer()
val G: integer()
val B: integer()
val slice/2: fun((binary(), integer()) -> list(binary()))
val Binary: binary()
val SliceSize: integer()
val Slice: binary()
