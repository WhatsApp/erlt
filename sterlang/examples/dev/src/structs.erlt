%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(structs).
-export([inferred_funs/0]).

-struct user() :: (name :: string(), id :: integer()).
-struct manager() :: (user :: user()).
-struct ok() :: ().

-struct box(A) :: (value :: A).
-struct box2(A, B) :: (value1 :: A, value2 :: B).

-spec test(user()) -> user().
test(X) -> X.

-struct wrapped_int() :: (int_value = 0 :: integer()).

-struct mixed_struct1(A) :: (A, failover :: A).
-struct mixed_struct2(A, B) :: (A, failover :: B).

-struct indices() :: (integer(), string()).

mk_user(Name, Id) ->
    #user{name = Name, id = Id}.

update_user(User, Name, Id) ->
    User#user{name = Name, id = Id}.

get_id(User) ->
    User#user.id.

get_man_id(Manager) ->
    Manager#manager.user#user.id.

check_user(User) when User == #user{name = "anonymous", id = -1} ->
    #ok{}.

check_users(User1, User2) when User1#user.id == User2#user.id ->
    #ok{};
check_users(_User1, _User2) ->
    #ok{}.

is_user(#user{}) -> true.

match_users(#user{id = Id}, #user{id = Id}) -> true.

foo(#manager{user = User}) ->
    User.


mk_box_int() ->
    #box{value = 1}.

mk_box(X) ->
    #box{value = X}.

mk_box2(X) ->
    #box2{value1 = X, value2 = X}.

update_box(B, X) ->
    B#box{value = X}.

update_box2(B, X) ->
    B#box2{value1 = X, value2 = X}.

update_box2(B, Y, X) ->
    B#box2{value1 = X, value2 = Y}.

select_box2(B) ->
    B#box2.value1 + B#box2.value2.

test_box2(B) ->
    B#box2.value1 == B#box2.value2.

pat_box2(#box2{value1 = X, value2 = X}) -> X;
pat_box2(#box2{value1 = _X, value2 = Y}) -> Y.

mk_wrapped_int() ->
    #wrapped_int{}.

mk_mixed1() ->
    #mixed_struct1{1, failover = 2}.

mk_mixed2() ->
    #mixed_struct2{[1, 2], failover = 2}.

match_mixed1(#mixed_struct1{1, failover = 2}) ->
    true.

match_mixed2(#mixed_struct2{[1, 2], failover = 2}) ->
    true.

struct_indices() ->
    Indices = #indices{1, "2"},
    {Indices#indices._0, Indices#indices._1}.

[unchecked]
inferred_funs() -> [
    fun test/1,
    fun mk_user/2,
    fun update_user/3,
    fun get_id/1,
    fun get_man_id/1,
    fun check_user/1,
    fun check_users/2,
    fun is_user/1,
    fun match_users/2,
    fun foo/1,
    fun mk_box_int/0,
    fun mk_box/1,
    fun mk_box2/1,
    fun update_box/2,
    fun update_box2/2,
    fun update_box2/3,
    fun select_box2/1,
    fun test_box2/1,
    fun pat_box2/1,
    fun mk_wrapped_int/0,
    fun mk_mixed1/0,
    fun mk_mixed2/0,
    fun match_mixed1/1,
    fun match_mixed2/1,
    fun update_box2/3,
    fun select_box2/1,
    fun test_box2/1,
    fun pat_box2/1,
    fun mk_wrapped_int/0,
    fun mk_mixed1/0,
    fun mk_mixed2/0,
    fun match_mixed1/1,
    fun match_mixed2/1,
    fun struct_indices/0
].
