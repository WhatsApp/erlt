-spec id(A) -> A.
-spec arg13(A, B, C) -> A.
-spec arg23(A, B, C) -> B.
-spec arg33(A, B, C) -> C.
-spec mk_int() -> number().
-spec mk_string() -> string().
-spec mk_nil() -> list(A).
-spec mk_cons(A, list(A)) -> list(A).
-spec mk_tuple(A, B, C) -> {A, B, C}.
-spec mk_tuple2(A) -> {number(), number(), number(), A}.
-spec mk_map(A, B) -> #( a :: A, b :: B ).
-spec update_map1(#( a :: A ), A) -> #( a :: A ).
-spec update_map3(#( a :: A, b :: A )) -> #( a :: A, b :: A ).
-spec access_map(#( id :: A, location :: B, C )) -> {A, B}.
-spec access_map2(#( inner1 :: #( inner2 :: A ) )) -> A.
-spec mk_seq() -> {number(), number()}.
-spec is_empty(list(A)) -> boolean().
-spec is_empty2(list(A)) -> boolean().
-spec with_as(number()) -> number().
-spec block(A, list(A)) -> {list(A), list(A)}.
-spec is_empty_case(list(A)) -> boolean().
-spec both_empty(list(A), list(B)) -> boolean().
-spec call(list(A), list(B)) -> boolean().
-spec fun_to_var() -> fun((A, B) -> {A, B}).
-spec local_fun_to_var(A, B) -> fun((list(C), list(D)) -> boolean()).
-spec local_n_fun() -> fun((list(A)) -> list(B)).
-spec mod01F(A) -> A.
-spec unary_plus(number()) -> number().
-spec unary_minus(number()) -> number().
-spec unary_not(boolean()) -> boolean().
-spec unary_bnot(number()) -> number().
-spec binary_star(number(), number()) -> number().
-spec binary_div(number(), number()) -> number().
-spec binary_rem(number(), number()) -> number().
-spec binary_band(number(), number()) -> number().
-spec binary_and(boolean(), boolean()) -> boolean().
-spec binary_plus(number(), number()) -> number().
-spec binary_minus(number(), number()) -> number().
-spec binary_bor(number(), number()) -> number().
-spec binary_bxor(number(), number()) -> number().
-spec binary_bsl(number(), number()) -> number().
-spec binary_bsr(number(), number()) -> number().
-spec binary_or(boolean(), boolean()) -> boolean().
-spec binary_xor(boolean(), boolean()) -> boolean().
-spec binary_orelse(boolean(), boolean()) -> boolean().
-spec binary_andalso(boolean(), boolean()) -> boolean().
-spec list_plus(list(A), list(A)) -> list(A).
-spec list_minus(list(A), list(A)) -> list(A).
-spec comp1(A, A) -> boolean().
-spec comp2(A, A) -> boolean().
-spec comp3(A, A) -> boolean().
-spec comp4(A, A) -> boolean().
-spec comp5(A, A) -> boolean().
-spec comp6(A, A) -> boolean().
-spec comp7(A, A) -> boolean().
-spec comp8(A, A) -> boolean().
-spec guard1(number(), number()) -> boolean().
-spec guard2(list(A), A, list(A)) -> list(A).
-spec p_match_tuple0({}) -> {{}}.
-spec p_match_tuple1({A}) -> {}.
-spec p_match_invoke() -> {}.
-spec any_id(any()) -> any().
-spec atom_id(atom()) -> atom().
-spec binary_id(binary()) -> binary().
-spec bitstring_id(bitstring()) -> bitstring().
-spec byte_id(byte()) -> byte().
-spec float_id(number()) -> number().
-spec identifier_id(identifier()) -> identifier().
-spec iodata_id(iodata()) -> iodata().
-spec iolist_id(iolist()) -> iolist().
-spec map_id(map(A, B)) -> map(A, B).
-spec none_id(none()) -> none().
-spec noreturn_id(none()) -> none().
-spec number_id(none()) -> none().
-spec pid_id(pid()) -> pid().
-spec port_id(port()) -> port().
-spec reference_id(reference()) -> reference().
-spec term_id(term()) -> term().
-spec timeout_id(timeout()) -> timeout().
-spec ints_id({number(), number(), number()}) -> {number(), number(), number()}.
-spec mk_my_pair(A, A) -> {A, A}.
-spec float_as_int() -> number().
-spec float_pat(number()) -> string().
-spec char_pat(char()) -> char().
