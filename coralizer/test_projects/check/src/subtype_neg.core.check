-module(subtype_neg)
-exports(f01/1, f02/1, f03/1, f04/1, f05/1, f06/1, f07/1, f08/1, module_info/0, module_info/1)
-file([{subtype_neg.erl 1}])
-compile([export_all nowarn_export_all])
-type ab(0) :: 'a' | 'b'
-type pair_diff_elems(0) :: {'a', 'b'} | {'b', 'a'}
-type pair_ab(0) :: {ab(), ab()}

:: fun((term()) -> {A, A})
f01/1 = fun (var0) {
    case var0 of { X when true -> X }                        | X. Expected: {A, A}, Got: term()
}

:: fun((term()) -> atom())
f02/1 = fun (var0) {
    case var0 of { X when true -> X }                        | X. Expected: atom(), Got: term()
}

:: fun((fun((atom()) -> term())) -> fun((term()) -> atom()))
f03/1 = fun (var0) {
    case var0 of { F when true -> F }                        | F. Expected: fun((term()) -> atom()), Got: fun((atom()) -> term())
}

:: fun(('a' | 'b' | 'c') -> 'a' | 'b')
f04/1 = fun (var0) {
    case var0 of { X when true -> X }                        | X. Expected: 'a' | 'b', Got: 'a' | 'b' | 'c'
}

:: fun(('a' | 'b') -> none() | none())
f05/1 = fun (var0) {
    case var0 of { X when true -> X }                        | X. Expected: none() | none(), Got: 'a' | 'b'
}

:: fun(({'a' | 'b', 'a' | 'b'}) -> {'a', 'b'} | {'b', 'a'})
f06/1 = fun (var0) {
    case var0 of { X when true -> X }                        | X. Expected: {'a', 'b'} | {'b', 'a'}, Got: {'a' | 'b', 'a' | 'b'}
}

:: fun((pair_ab()) -> pair_diff_elems())
f07/1 = fun (var0) {
    case var0 of { X when true -> X }                        | X. Expected: {'a', 'b'} | {'b', 'a'}, Got: {'a' | 'b', 'a' | 'b'}
}

:: fun(({none(), none()}) -> none())
f08/1 = fun (var0) {
    case var0 of { X when true -> X }                        | X. Expected: none(), Got: {none(), none()}
}

module_info/0 = fun () {
    case <> of {
        <> when true -> erlang:get_module_info(subtype_neg)
    }
}

module_info/1 = fun (var0) {
    case var0 of {
        X when true -> erlang:get_module_info(subtype_neg, X)
    }
}
