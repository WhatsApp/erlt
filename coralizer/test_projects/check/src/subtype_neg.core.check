-module(subtype_neg).
-exports f01/1, f02/1, f03/1, f04/1, f05/1, f06/1, f07/1, f08/1, module_info/0, module_info/1.
-file([({/Users/mheiber/erlt/coralizer/test_projects/check/src/subtype_neg.erl 1})])
-compile([(export_all nowarn_export_all)])
-type([({pair_ab {type 9 tuple [({user_type 9 ab [()]} {user_type 9 ab [()]})]} [()]})])

module_info/1 = fun (var0)  { 
    case var0 of { 
        X when true -> erlang:get_module_info(subtype_neg, X)
    }
}

f06/1 = fun (var0)  { 
    case var0 of {  X when true -> X }                       | X. Expected: {'a', 'b'} | {'b', 'a'}, Got: {'a' | 'b', 'a' | 'b'}
}

f01/1 = fun (var0)  { 
    case var0 of {  X when true -> X }                       | X. Expected: {A, A}, Got: term()
}

f07/1 = fun (var0)  { 
    case var0 of {  X when true -> X }                       | X. Expected: {'a', 'b'} | {'b', 'a'}, Got: {'a' | 'b', 'a' | 'b'}
}

f05/1 = fun (var0)  { 
    case var0 of {  X when true -> X }                       | X. Expected: none() | none(), Got: 'a' | 'b'
}

f03/1 = fun (var0)  { 
    case var0 of {  F when true -> F }                       | F. Expected: fun((term()) -> atom()), Got: fun((atom()) -> term())
}

f04/1 = fun (var0)  { 
    case var0 of {  X when true -> X }                       | X. Expected: 'a' | 'b', Got: 'a' | 'b' | 'c'
}

f02/1 = fun (var0)  { 
    case var0 of {  X when true -> X }                       | X. Expected: atom(), Got: term()
}

module_info/0 = fun ()  { 
    case <> of { 
         when true -> erlang:get_module_info(subtype_neg)
    }
}

f08/1 = fun (var0)  { 
    case var0 of {  X when true -> X }                       | X. Expected: none(), Got: {none(), none()}
}
