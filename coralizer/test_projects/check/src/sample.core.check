-module(sample)
-exports(module_info/0, module_info/1, test17/1)
-file([{sample.erl 1}])
-compile([export_all])

:: fun((binary()) -> [number()])
test17/1 = fun (var0) {
    case var0 of {
        LB when true -> let var5 = letrec (lc$^0/1 =
                fun (var2) {
                    case var2 of {
                        <<Y: size-8 unit-1 type-integer flags-[unsigned big], var1: size-all unit-1 type-binary flags-[unsigned big]>> when true ->
                        let var4 = lc$^0/1(var1) in
                            { [Y | var4] };
                        <<var1: size-all unit-1 type-binary flags-[unsigned big]>> when true ->
                        []
                    }
                }) in { lc$^0/1(LB) } in {
                let Res = var5 in { Res }
            }
    }
}

module_info/0 = fun () {
    case <> of {
        <> when true -> erlang:get_module_info(sample)
    }
}

module_info/1 = fun (var0) {
    case var0 of {
        X when true -> erlang:get_module_info(sample, X)
    }
}
