-module(subtype_pos)
-exports(f01/1, f02/1, f03/1, f04/1, f05/1, f06/1, f07/1, f08/1, module_info/0, module_info/1)
-file([{subtype_pos.erl 1}])
-compile([export_all nowarn_export_all])
-type ab(0) :: 'a' | 'b'
-type pair_diff_elems(0) :: {'a', 'b'} | {'b', 'a'}
-type pair_ab(0) :: {ab(), ab()}

:: fun(({A, A}) -> term())
f01/1 = fun (var0) {
    case var0 of {  X when true -> X }
}

:: fun((atom()) -> term())
f02/1 = fun (var0) {
    case var0 of {  X when true -> X }
}

:: fun((fun((term()) -> atom())) -> fun((atom()) -> term()))
f03/1 = fun (var0) {
    case var0 of {  F when true -> F }
}

:: fun(('a' | 'b') -> 'a' | 'b' | 'c')
f04/1 = fun (var0) {
    case var0 of {  X when true -> X }
}

:: fun((none() | none()) -> 'a' | 'b')
f05/1 = fun (var0) {
    case var0 of {  X when true -> X }
}

:: fun(({'a', 'b'} | {'b', 'a'}) -> {'a' | 'b', 'a' | 'b'})
f06/1 = fun (var0) {
    case var0 of {  X when true -> X }
}

:: fun((pair_diff_elems()) -> pair_ab())
f07/1 = fun (var0) {
    case var0 of {  X when true -> X }
}

:: fun((none()) -> {none(), none()})
f08/1 = fun (var0) {
    case var0 of {  X when true -> X }
}

module_info/0 = fun () {
    case <> of {
        <> when true -> erlang:get_module_info(subtype_pos)
    }
}

module_info/1 = fun (var0) {
    case var0 of {
        X when true -> erlang:get_module_info(subtype_pos, X)
    }
}
