-module(t_lists).

-compile({no_auto_import,[max/2]}).
-compile({no_auto_import,[min/2]}).

% ordering of exports and specs in this file
% is the same as in otp erlang lists.erl
-export([
     append/2,
     append/1,
     subtract/2,
     reverse/1,
	 nth/2,
     nthtail/2,
     prefix/2,
     suffix/2,
     droplast/1,
     last/1,
	 seq/2,
     seq/3,
     sum/1,
     duplicate/2,
     min/1,
     max/1,
     sublist/2,
     sublist/3,
	 delete/2,
	 unzip/1,
     unzip3/1,
     zip/2,
     zip3/3,
     zipwith/3,
     zipwith3/4,
	 sort/1,
     merge/1,
     merge/2,
     rmerge/2,
     merge3/3,
     rmerge3/3,
	 usort/1,
     umerge/1,
     umerge3/3,
     umerge/2,
     rumerge3/3,
     rumerge/2,
	 concat/1,
     flatten/1,
     flatten/2,
     flatlength/1,
	 % keydelete/3,
     % keyreplace/4,
     % keytake/3,
     % keystore/4,
	 % keysort/2,
     keymerge/3,
     rkeymerge/3,
     rukeymerge/3,
	 ukeysort/2,
     ukeymerge/3
     % keymap/3
]).

-export([
     merge/3,
     rmerge/3,
     sort/2,
     % umerge/3,
     rumerge/3,
     usort/2
]).

-export([
     all/2,
     any/2,
     map/2,
     flatmap/2,
     foldl/3,
     foldr/3,
     filter/2,
	 partition/2,
     % zf/2,
     % filtermap/2,
	 mapfoldl/3,
     mapfoldr/3,
     % foreach/2,
     takewhile/2,
     dropwhile/2,
     % search/2,
     splitwith/2,
     split/2,
	 join/2
]).

%%% BIFs
-export([
     % keyfind/3,
     % keymember/3,
     % keysearch/3,
     member/2,
     reverse/2
]).

%% key of comments used in this file:
% - dangerous: type is not specific enough.
% - superseded: there is or will be an "ErlT way" of accomplishing the same
% goal in a more type-safe manner.
%
% - stricter: signature is more restrictive than
%           what an accurate classic Erlang type would express

% stricter: only works for 2-tuples - perhaps we want row polymorphism for tuples
% or to make tuples a special case of shapes.
% This type is also hard to express because the key is compared to the nth
% element of the tuple: proper typing requires something like atom singleton types
% and tuple lookup types.
% -spec keyfind(_K, integer(), [_]) -> _.
% keyfind(_, _, _) ->
%     stub().

% stricter: only works for 2-tuples
% -spec keymember(_K, integer(), [_]) -> boolean().
% keymember(_, _, _) ->
%     stub().

% dangerous
% stricter: only works for 2-tuples
% -spec keysearch(_K, integer(), [_]) -> _.
% keysearch(_, _, _) ->
%     stub().

-spec member(T, [T]) -> boolean().
[unchecked]
member(A, B) ->
    lists:member(A, B).

-spec reverse([T], [T]) -> [T].
[unchecked]
reverse(A, B) ->
    lists:reverse(A, B).

-spec append([T], [T]) -> [T].
[unchecked]
append(A, B) ->
    lists:append(A, B).

-spec append([[T]]) -> [T].
[unchecked]
append(A) ->
    lists:append(A).

-spec subtract([T], [T]) -> [T].
[unchecked]
subtract(A, B) ->
    lists:subtract(A, B).

-spec reverse([T]) -> [T].
[unchecked]
reverse(A) ->
    lists:reverse(A).

-spec nth(integer(), [T]) -> T.
[unchecked]
nth(A, B) ->
    lists:nth(A, B).

-spec nthtail(integer(), [T]) -> [T].
[unchecked]
nthtail(A, B) ->
    lists:nthtail(A, B).

-spec prefix([T], [T]) -> boolean().
[unchecked]
prefix(A, B) ->
    lists:prefix(A, B).

-spec suffix([T], [T]) -> boolean().
[unchecked]
suffix(A, B) ->
    lists:suffix(A, B).

-spec droplast([T]) -> [T].
[unchecked]
droplast(A) ->
    lists:droplast(A).

-spec last([T]) -> T.
[unchecked]
last(A) ->
    lists:last(A).

-spec seq(integer(), integer()) -> [integer()].
[unchecked]
seq(A, B) ->
    lists:seq(A, B).

-spec seq(integer(), integer(), integer()) -> [integer()].
[unchecked]
seq(A, B, C) ->
    lists:seq(A, B, C).

-spec sum([number()]) -> number().
[unchecked]
sum(A) ->
    lists:sum(A).

-spec duplicate(integer(), T) -> [T].
[unchecked]
duplicate(A, B) ->
    lists:duplicate(A, B).

-spec min([T]) -> T.
[unchecked]
min(A) ->
    lists:min(A).

-spec max([T]) -> T.
[unchecked]
max(A) ->
    lists:max(A).

-spec sublist([T], integer(), integer()) -> [T].
[unchecked]
sublist(A, B, C) ->
    lists:sublist(A, B, C).

-spec sublist([T], integer()) -> [T].
[unchecked]
sublist(A, B) ->
    lists:sublist(A, B).

-spec delete(T, [T]) -> [T].
[unchecked]
delete(A, B) ->
    lists:delete(A, B).

-spec zip([A], [B]) -> [{A, B}].
[unchecked]
zip(A, B) ->
    lists:zip(A, B).

-spec unzip([{A, B}]) -> {[A], [B]}.
[unchecked]
unzip(A) ->
    lists:unzip(A).

-spec zip3([A], [B], [C]) -> [{A, B, C}].
[unchecked]
zip3(A, B, C) ->
    lists:zip3(A, B, C).

-spec unzip3([{A, B, C}]) -> {[A], [B], [C]}.
[unchecked]
unzip3(A) ->
    lists:unzip3(A).

-spec zipwith(fun((X, Y) -> T), [X], [Y]) -> [T].
[unchecked]
zipwith(A, B, C) ->
    lists:zipwith(A, B, C).

-spec zipwith3(fun((X, Y, Z) -> T), [X], [Y], [Z]) -> [T].
[unchecked]
zipwith3(A, B, C, D) ->
    lists:zipwith3(A, B, C, D).

-spec sort([T]) -> [T].
[unchecked]
sort(A) ->
    lists:sort(A).

-spec merge([[T]]) -> [T].
[unchecked]
merge(A) ->
    lists:merge(A).

% stricter
-spec merge3([T], [T], [T]) -> [T].
[unchecked]
merge3(A, B, C) ->
    lists:merge3(A, B, C).

% stricter
-spec rmerge3([T], [T], [T]) -> [T].
[unchecked]
rmerge3(A, B, C) ->
    lists:rmerge3(A, B, C).

% stricter
-spec merge([T], [T]) -> [T].
[unchecked]
merge(A, B) ->
    lists:merge(A, B).

% stricter
-spec rmerge([T], [T]) -> [T].
[unchecked]
rmerge(A, B) ->
    lists:rmerge(A, B).

-spec concat([_T]) -> string().
[unchecked]
concat(A) ->
    lists:concat(A).

% stricter: the implementation can handle arbitrary, heterogeneous depth
-spec flatten([[T]]) -> [T].
[unchecked]
flatten(A) ->
    lists:flatten(A).

% stricter: the implementation can handle arbitrary, heterogeneous depth
-spec flatten([[T]], [T]) -> [T].
[unchecked]
flatten(A, B) ->
    lists:flatten(A, B).

% stricter: the implementation can handle arbitrary, heterogeneous depth
-spec flatlength([[_T]]) -> integer().
[unchecked]
flatlength(A) ->
    lists:flatlength(A).

% dangerous
% -spec keydelete(_, integer(), _) -> [_].
% keydelete(_, _, _) ->
%     stub().

% dangerous
% -spec keyreplace(_, integer(), [T], _) -> [T].
% keyreplace(_, _, _, _) ->
%     stub().

% dangerous
% -spec keytake(_, integer(), [_]) -> _.
% keytake(_, _, _) ->
%     stub().


% dangerous
% -spec keystore(_, integer(), [T], _) -> [T].
% keystore(_, _, _, _) ->
%     stub().

% dangerous
% -spec keysort(integer(), [T]) -> [T].
% keysort(_, _) ->
%     stub().

% stricter
-spec keymerge(integer(), [T], [T]) -> [T].
[unchecked]
keymerge(A, B, C) ->
    lists:keymerge(A, B, C).

% stricter
-spec rkeymerge(integer(), [T], [T]) -> [T].
[unchecked]
rkeymerge(A, B, C) ->
    lists:rkeymerge(A, B, C).

% stricter
-spec ukeysort(integer(), [T]) -> [T].
[unchecked]
ukeysort(A, B) ->
    lists:ukeysort(A, B).

% stricter
-spec ukeymerge(integer(), [T], [T]) -> [T].
[unchecked]
ukeymerge(A, B, C) ->
    lists:ukeymerge(A, B, C).

% stricter
-spec rukeymerge(integer(), [T], [T]) -> [T].
[unchecked]
rukeymerge(A, B, C) ->
    lists:rukeymerge(A, B, C).

% stricter
% dangerous
% -spec keymap(fun((_) -> _), integer(), [T]) -> [T].
% keymap(_, _, _) ->
%     stub().

% stricter
-spec sort(fun((T, T) -> boolean()), [T]) -> [T].
[unchecked]
sort(A, B) ->
    lists:sort(A, B).

% stricter
-spec merge(fun((T, T) -> boolean()), [T], [T]) -> [T].
[unchecked]
merge(A, B, C) ->
    lists:merge(A, B, C).

% stricter
-spec rmerge(fun((T, T) -> boolean()), [T], [T]) -> [T].
[unchecked]
rmerge(A, B, C) ->
    lists:rmerge(A, B, C).

% stricter
-spec rumerge(fun((T, T) -> boolean()), [T], [T]) -> [T].
[unchecked]
rumerge(A, B, C) ->
    lists:rumerge(A, B, C).

% stricter
-spec usort(fun((T, T) -> boolean()), [T]) -> [T].
[unchecked]
usort(A, B) ->
    lists:usort(A, B).

% stricter
% dangerous
% -spec umerge(fun((T, T) -> boolean()), [T], [T]) -> [T].
% umerge(_, _, _) ->
%     stub().

% stricter
-spec umerge(fun((T, T) -> boolean()), [T]) -> [T].
[unchecked]
umerge(A, B) ->
    lists:umerge(A, B).

% stricter
-spec rumerge3(fun((T, T) -> boolean()), [T], [T]) -> [T].
[unchecked]
rumerge3(A, B, C) ->
    lists:rumerge3(A, B, C).

-spec usort([T]) -> [T].
[unchecked]
usort(A) ->
    lists:usort(A).
      
-spec umerge([[T]]) -> [T].
[unchecked]
umerge(A) ->
    lists:umerge(A).

% stricter
-spec umerge3([T], [T], [T]) -> [T].
[unchecked]
umerge3(A, B, C) ->
    lists:umerge3(A, B, C).

% stricter
-spec rumerge([T], [T]) -> [T].
[unchecked]
rumerge(A, B) ->
    lists:rumerge(A, B).

-spec all(fun((T) -> boolean()), [T]) -> boolean().
[unchecked]
all(A, B) ->
    lists:all(A, B).

-spec any(fun((T) -> boolean()), [T]) -> boolean().
[unchecked]
any(A, B) ->
    lists:any(A, B).

-spec map(fun((A) -> B), [A]) -> [B].
[unchecked]
map(A, B) ->
    lists:map(A, B).

-spec flatmap(fun((A) -> [B]), [A]) -> [B].
[unchecked]
flatmap(A, B) ->
    lists:flatmap(A, B).

% stricter
-spec foldl(fun((T, Acc) -> Acc), Acc, [T]) -> Acc.
[unchecked]
foldl(A, B, C) ->
    lists:foldl(A, B, C).

% stricter
-spec foldr(fun((T, Acc) -> Acc), Acc, [T]) -> Acc.
[unchecked]
foldr(A, B, C) ->
    lists:foldr(A, B, C).

-spec filter(fun((T) -> boolean()), [T]) -> [T].
[unchecked]
filter(A, B) ->
    lists:filter(A, B).

-spec partition(fun((T) -> boolean()), [T]) -> {[T], [T]}.
[unchecked]
partition(A, B) ->
    lists:partition(A, B).

% dangerous
% % stricter
% -spec filtermap(fun((T) -> _), [T]) -> [T].
% filtermap(_, _) ->
    % stub().


% dangerous
% % stricter
% -spec zf(fun((T) -> _), [T]) -> [T].
% zf(_, _) ->
    % stub().

% dangerous
% -spec foreach(fun((T) -> _), [T]) -> _.
% foreach(_, _) ->
%     stub().

% stricter
-spec mapfoldr(fun((A, Acc) -> {B, Acc}), Acc, [A]) -> {[B], Acc}.
[unchecked]
mapfoldr(A, B, C) ->
    lists:mapfoldr(A, B, C).

% stricter
-spec mapfoldl(fun((A, Acc) -> {B, Acc}), Acc, [A]) -> {[B], Acc}.
[unchecked]
mapfoldl(A, B, C) ->
    lists:mapfoldl(A, B, C).

-spec takewhile(fun((T) -> boolean()), [T]) -> [T].
[unchecked]
takewhile(A, B) ->
    lists:takewhile(A, B).

-spec dropwhile(fun((T) -> boolean()), [T]) -> [T].
[unchecked]
dropwhile(A, B) ->
    lists:dropwhile(A, B).

% dangerous
% -spec search(fun((T) -> boolean()), [T]) -> _.
% search(_, _) ->
%     stub().

-spec splitwith(fun((T) -> boolean()), [T]) -> {[T], [T]}.
[unchecked]
splitwith(A, B) ->
    lists:splitwith(A, B).

-spec split(integer(), [T]) -> {[T], [T]}.
[unchecked]
split(A, B) ->
    lists:split(A, B).

-spec join(T, [T]) -> [T].
[unchecked]
join(A, B) ->
    lists:join(A, B).
