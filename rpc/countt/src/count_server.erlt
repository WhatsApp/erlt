-module(count_server).

-behavior(gen_server).

-export([handle_call/3, handle_cast/2, init/1]).

-export([start/2, stop/1, equal/2, closer/3, inc/2, dec/2]).

-include("stdt.hrl").

-type input() :: integer().
-type state() :: integer().

-enum call_request() :: (
    equal{integer()},
    closer{integer(), integer()}
).

-enum call_response() :: (
    equal{boolean()},
    closer{integer()}
).

-enum cast_request() :: (
    inc{integer()},
    dec{integer()}
).

-spec start(gen_server:name(), input()) -> ok_value(pid()).
start(Name, InitArgs) ->
    {ok, Pid} = gen_server:start_link({local, Name}, ?MODULE, InitArgs, []),
    ok_value.ok{Pid}.

-spec stop(gen_server:name()) -> ok().
stop(Name) ->
    ok = gen_server:stop(Name),
    ok.ok{}.

-spec equal(gen_server:name(), integer()) -> boolean().
equal(Name, Arg0) ->
    call_response.equal{Ans} = gen_server:call(Name, call_request.equal{Arg0}),
    Ans.

-spec closer(gen_server:name(), integer(), integer()) -> integer().
closer(Name, Arg0, Arg1) ->
    call_response.closer{Ans} = gen_server:call(Name, call_request.closer{Arg0, Arg1}),
    Ans.

-spec inc(gen_server:name(), integer()) -> ok().
inc(Name, Arg0) ->
    ok = gen_server:cast(Name, cast_request.inc{Arg0}),
    ok.ok{}.

-spec dec(gen_server:name(), integer()) -> ok().
dec(Name, Arg0) ->
    ok = gen_server:cast(Name, cast_request.dec{Arg0}),
    ok.ok{}.

-spec init(input()) -> atom_ok_value(state()).
init(Input) ->
    {ok, Input}.

-spec handle_call(call_request(), pid(), state()) -> atom_reply(call_response(), state()).
handle_call(Request, _From, State) ->
    case Request of
        call_request.equal{^State} ->
            {reply, call_response.equal{true}, State};
        call_request.equal{_} ->
            {reply, call_response.equal{false}, State};
        call_request.closer{Arg0, Arg1} ->
            Result = handle_closer(Arg0, Arg1, State),
            {reply, call_response.closer{Result}, State}
    end.

-spec handle_cast(cast_request(), state()) -> atom_noreply(state()).
handle_cast(Request, State) ->
    case Request of
        cast_request.inc{I} -> {noreply, State + I};
        cast_request.dec{I} -> {noreply, State - I}
    end.

-spec handle_closer(integer(), integer(), state()) -> integer().
handle_closer(I, J, S) ->
    case abs(I - S) < abs(J - S) of
        true -> I;
        false -> J
    end.
