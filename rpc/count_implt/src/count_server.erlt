%% generated by rpctc impl
-module(count_server).
-behavior(gen_server).

-export([handle_call/3, handle_cast/2, init/1]).

-export([start/3, stop/1, equal/2, closer/3, inc/2, dec/2]).

-export_type([impl_module/2]).

%% These are the callbacks for the count_server behaviour
-struct impl_module(Input, State) :: (
    init :: fun((Input) -> State),
    equal :: fun((integer(), State) -> {boolean(), State}),
    closer :: fun((integer(), integer(), State) -> {integer(), State}),
    inc :: fun((integer(), State) -> State),
    dec :: fun((integer(), State) -> State)
).

-spec start(gen_server:name(), Input, impl_module(Input, _)) -> {ok, pid()}.
start(Name, InitArgs, ImplModule) ->
    gen_server:start_link({local, Name}, ?MODULE, {ImplModule, InitArgs}, []).

-spec stop(gen_server:name()) -> ok.
stop(Name) ->
    gen_server:stop(Name).

-spec equal(gen_server:name(), integer()) -> boolean().
equal(Name, Arg0) ->
    gen_server:call(Name, {equal, Arg0}).

-spec closer(gen_server:name(), integer(), integer()) -> integer().
closer(Name, Arg0, Arg1) ->
    gen_server:call(Name, {closer, Arg0, Arg1}).

-spec inc(gen_server:name(), integer()) -> ok.
inc(Name, Arg0) ->
    gen_server:cast(Name, {inc, Arg0}).

-spec dec(gen_server:name(), integer()) -> ok.
dec(Name, Arg0) ->
    gen_server:cast(Name, {dec, Arg0}).

-spec init({impl_module(Input, State), Input}) -> {ok, {impl_module(Input, State), State}}.
init({ImplModule, InitArgs}) ->
    State = (ImplModule#impl_module.init)(InitArgs),
    {ok, {ImplModule, State}}.

-spec handle_cast
    ({handle_inc, integer()}, {impl_module(Input, State), State}) -> {noreply, {impl_module(Input, State), State}};
    ({handle_dec, integer()}, {impl_module(Input, State), State}) -> {noreply, {impl_module(Input, State), State}}.
handle_cast({inc, Arg0}, {ImplModule, State}) ->
    {noreply, {ImplModule, (ImplModule#impl_module.inc)(Arg0, State)}};
handle_cast({dec, Arg0}, {ImplModule, State}) ->
    {noreply, {ImplModule, (ImplModule#impl_module.dec)(Arg0, State)}}.

-spec handle_call
    ({handle_equal, integer()}, pid(), {impl_module(Input, State), State}) -> {reply, boolean(), {impl_module(Input, State), State}};
    ({handle_closer, integer(), integer()}, pid(), {impl_module(Input, State), State}) -> {reply, integer(), {impl_module(Input, State), State}}.
handle_call({equal, Arg0}, _From, {ImplModule, State}) ->
    {Result, NewState} = (ImplModule#impl_module.equal)(Arg0, State),
    {reply, Result, {ImplModule, NewState}};
handle_call({closer, Arg0, Arg1}, _From, {ImplModule, State}) ->
    {Result, NewState} = (ImplModule#impl_module.closer)(Arg0, Arg1, State),
    {reply, Result, {ImplModule, NewState}}.
