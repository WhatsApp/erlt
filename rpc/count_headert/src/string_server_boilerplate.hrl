%% generated by rpctc header
-behaviour(gen_server).

-export([equal/2, inc/2, dec/2]).

-export([handle_equal/2, handle_inc/2, handle_dec/2]).

-export([handle_call/3, handle_cast/2, init/1]).

-include("stdt.hrl").

-callback handle_init(input()) -> state().
-callback handle_equal(integer(), state()) -> {boolean(), state()}.
-callback handle_inc(integer(), state()) -> state().
-callback handle_dec(integer(), state()) -> state().

-spec service_start({registration(), gen_server:name()}, input()) -> ok_value(pid()).
service_start(RegistrationScheme, InitArgs) ->
    RScheme =
        case RegistrationScheme of
            {registration.local{}, Name} -> {local, Name};
            {registration.global{}, Name} -> {global, Name}
        end,
    {ok, Pid} = gen_server:start_link(RScheme, ?MODULE, InitArgs, []),
    ok_value.ok{Pid}.

-spec service_stop(gen_server:name()) -> ok().
service_stop(Name) ->
    ok = gen_server:stop(Name),
    ok.ok{}.

-spec equal(gen_server:name(), integer()) -> boolean().
equal(Name, Arg0) ->
    gen_server:call(Name, {handle_equal, Arg0}).

-spec inc(gen_server:name(), integer()) -> ok().
inc(Name, Arg0) ->
    ok = gen_server:cast(Name, {handle_inc, Arg0}),
    ok.ok{}.

-spec dec(gen_server:name(), integer()) -> ok().
dec(Name, Arg0) ->
    ok = gen_server:cast(Name, {handle_dec, Arg0}),
    ok.ok{}.

-spec init(input()) -> atom_ok_value(state()).
init(InitState) ->
    State = handle_init(InitState),
    {ok, State}.

%% -spec handle_cast
%%     ({handle_inc, integer()}, state()) -> noreply(state());
%%     ({handle_dec, integer()}, state()) -> noreply(state()).
handle_cast({handle_inc, Arg0}, State) ->
    {noreply, (?MODULE:handle_inc)(Arg0, State)};
handle_cast({handle_dec, Arg0}, State) ->
    {noreply, (?MODULE:handle_dec)(Arg0, State)}.

%% -spec handle_call
%%     ({handle_equal, integer()}, pid(), state()) -> reply(boolean(), state()).
handle_call({handle_equal, Arg0}, _From, State) ->
    {Result, NewState} = (?MODULE:handle_equal)(Arg0, State),
    {reply, Result, NewState}.
