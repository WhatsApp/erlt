%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(bad_types).

-export([test/0]).

-type bin() :: <<_:1>>.

-type bin2() :: <<>>.

-type range() :: 1..3.

-type s_int() :: 0.

-type s_atom() :: 'hello'.

-type s_char() :: $a.

-type map_type() :: map().

-type map_type2(A, B) :: #{A => B}.

-type fun_type() :: fun((_A) -> {integer()}).

-type anon_fun_type() :: fun((...) -> integer()).

-type non_empty() :: [integer(),...].

-type empty() :: [].

-type record() :: #hello{}.

-type tuple_type() :: tuple().

-type union_type() :: atom() | integer().

-type param_type1(A) :: integer().

-type unparam_type1() :: {A,A}.

-type bad_shape_type() :: #(id :: atom(), A).

[opaque, unchecked]
-type badder(_) :: term().

-spec test() -> bin() | bin2() | range() | s_int() | s_atom() | map_type2(integer(), integer()) | fun_type() |
    anon_fun_type() | non_empty() | empty() | record() | badder(bad_shape_type()) |
    map_type() | tuple_type() | union_type() | param_type1(integer()) | unparam_type1().
test() -> {0,0}.
