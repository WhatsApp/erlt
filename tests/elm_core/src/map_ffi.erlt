%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(map_ffi).

-export_type([map_/2]).

-export([empty/0, get/2, size/1, insert/3, remove/2, fold/3, union/2, filter/2, map/2]).
-export([keys/1, values/1, to_list/1, from_list/1]).

-import_type(maybe, [maybe/1]).

[unchecked, opaque]
-type map_(K, V) :: term().

-spec empty() -> map_(_K, _V).
[unchecked]
empty() ->
    maps:new().

-spec get(K, map_(K, V)) -> maybe(V).
[unchecked]
get(Key, Map) ->
    case maps:find(Key, Map) of
        {'ok',Value} -> maybe.just{Value};
        'error' -> maybe.nothing
    end.

-spec size(map_(_K,_V)) -> integer().
[unchecked]
size(Map) ->
    maps:size(Map).

-spec insert(K, V, map_(K, V)) -> map_(K, V).
[unchecked]
insert(Key, Value, Map) ->
    maps:put(Key, Value, Map).

-spec remove(K, map_(K, V)) -> map_(K, V).
[unchecked]
remove(Key, Map) ->
    maps:remove(Key, Map).

-spec fold(fun((K, V, R) -> R), R, map_(K, V)) -> R.
[unchecked]
fold(F, Acc, Map) ->
    maps:fold(F, Acc, Map).

-spec union(map_(K, V), map_(K, V)) -> map_(K, V).
[unchecked]
union(Map1, Map2) ->
    maps:merge(Map1, Map2).

-spec filter(fun((K, V) -> boolean()), map_(K, V)) -> map_(K, V).
[unchecked]
filter(F, Map) ->
    maps:filter(F, Map).

-spec map(fun((K, A) -> B), map_(K, A)) -> map_(K, B).
[unchecked]
map(F, Map) ->
    maps:map_(F, Map).

-spec keys(map_(K, _V)) -> list(K).
[unchecked]
keys(Map) ->
    maps:keys(Map).

-spec values(map_(_K, V)) -> list(V).
[unchecked]
values(Map) ->
    maps:values(Map).

-spec to_list(map_(K, V)) -> list({K, V}).
[unchecked]
to_list(Map) ->
    maps:to_list(Map).

-spec from_list(list({K, V})) -> map_(K, V).
[unchecked]
from_list(List) ->
    maps:from_list(List).
