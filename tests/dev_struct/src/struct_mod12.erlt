%% Copyright (c) Facebook, Inc. and its affiliates.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(struct_mod12).

-export([expr/0, pattern/3, guard/3, field/1, update/1, index/1]).

-spec expr() -> {struct_mod11:bar(number()), struct_mod11:mixed()}.
expr() ->
    {
        #struct_mod11:bar{1, #struct_mod11:mixed{1, a = 2}},
        #struct_mod11:mixed{1, a = 2}
    }.

-spec pattern(struct_mod11:bar(number()), struct_mod11:mixed(), number()) -> number().
pattern(#struct_mod11:bar{B, _}, #struct_mod11:mixed{B, a = B}, B) ->
    B.

-spec guard(struct_mod11:bar(number()), struct_mod11:mixed(), struct_mod11:mixed()) -> atom().
guard(Value1, Value2, B) when Value1 =:= #struct_mod11:bar{1, B}, Value2 =:= #struct_mod11:mixed{1, a = 2} ->
    'ok'.

-spec field(struct_mod11:bar(number())) -> struct_mod11:mixed().
field(Value) when Value#struct_mod11:bar._0 =:= 1 ->
    Value#struct_mod11:bar._1.

-spec update(struct_mod11:mixed()) -> struct_mod11:mixed().
update(Value) ->
    Value#struct_mod11:mixed{a = 2}.

[unchecked]
index(#struct_mod11:bar._0) when #struct_mod11:bar._0 =:= 2 ->
    #struct_mod11:bar._1.
